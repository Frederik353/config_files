
- name: Machine setup
  hosts: localhost
  become: true
  connection: local
  gather_facts: true
  vars:
    flyctl_version: "0.1.130"
    pulumi_version: "v3.94.2"

  tasks:
    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER | default(ansible_user_id) }}"

    - name: Install essential build dependencies
      ansible.builtin.apt:
        name:
          - build-essential
          - cmake
          - pkg-config
          - meson
          - ninja-build
          - libffi-dev
          - libxml2-dev
          - doxygen
          - xmlto
        state: present

    - name: Install packages
      ansible.builtin.apt:
        name:
          - git
          - htop
          - vim
          - neovim
          - gh
          - gcc
          - ripgrep
          - zsh
          - fzf
          - tmux
          - ffmpeg
          - xclip
          - xsel
          - make
          - luarocks
          - g++
          - inotify-tools
          - duf
          - entr
          - eza
          - bat
          - fd-find
          - tldr
          - neofetch
          - nmap
          - wireshark
          - metasploit-framework
          - aircrack-ng
          - john
          - hydra
          - foremost
          - hashcat
          - weevely
          - dradis
          - sqlmap
          - wpscan
          - hping3
          - gdb
          - seclists
          - burpsuite
          - alacritty
          - wget
          - gettext
          - fontconfig
          - libfontconfig-dev
          - libdrm-dev
          - libxkbcommon-x11-dev
          - libxkbregistry-dev
          - libxkbcommon-dev
          - libpixman-1-dev
          - libudev-dev
          - libseat-dev
          - seatd
          - libxcb-dri3-dev
          - libegl-dev
          - libgles2
          - libegl1-mesa-dev
          - glslang-tools
          - libinput-bin
          - libinput-dev
          - libxcb-composite0-dev
          - libavutil-dev
          - libavcodec-dev
          - libavformat-dev
          - libxcb-ewmh2
          - libxcb-ewmh-dev
          - libxcb-present-dev
          - libxcb-icccm4-dev
          - libxcb-render-util0-dev
          - libxcb-res0-dev
          - libxcb-xinput-dev
          - xdg-desktop-portal-wlr
          - libtomlplusplus3
          - zoxide
        state: present
        update_cache: yes

    - name: Change shell to zsh
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        shell: /usr/bin/zsh

    - name: Import Microsoft GPG Key
      ansible.builtin.apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
        state: present

    - name: Add Visual Studio Code Repo
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64] http://packages.microsoft.com/repos/vscode stable main"
        filename: vscode

    - name: Install VS Code
      ansible.builtin.apt:
        name: code
        state: present

    - name: Ensure fonts directory
      ansible.builtin.file:
        path: "/home/{{ remote_regular_user }}/.fonts"
        state: directory
        mode: "0755"
        owner: "{{ remote_regular_user }}"

    - name: Check if Hack Nerd Font exists
      ansible.builtin.shell: "ls /home/{{ remote_regular_user }}/.fonts/Hack*"
      register: hack_nerd_font_exists
      ignore_errors: true
      changed_when: false

    - name: Download and Install Hack Nerd Font
      when: hack_nerd_font_exists is failed
      ansible.builtin.unarchive:
        src: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.0/Hack.zip
        dest: "/home/{{ remote_regular_user }}/.fonts/"
        remote_src: true
        creates: "/home/{{ remote_regular_user }}/.fonts/Hack Regular Nerd Font Complete.ttf"


    - name: Ensure TPM is installed
      git:
        repo: 'https://github.com/tmux-plugins/tpm'
        dest: "/home/{{ remote_regular_user }}/.tmux/plugins/tpm"
        version: master
        update: yes
        force: yes
      become: yes
      become_user: "{{ remote_regular_user }}"

    - name: Check if tmux is running
      ansible.builtin.shell: "pgrep -x tmux || true"
      register: tmux_running
      ignore_errors: yes

    - name: Check if tmux session exists
      ansible.builtin.shell: "tmux ls || true"
      register: tmux_sessions
      ignore_errors: yes

    - name: Debug tmux sessions status
      ansible.builtin.debug:
        var: tmux_sessions

    - name: Reload tmux configuration
      ansible.builtin.shell: "tmux source-file /home/{{ remote_regular_user }}/.tmux.conf"
      when: tmux_running.rc == 0
      become: yes
      become_user: "{{ remote_regular_user }}"

    - name: Install tmux plugins
      ansible.builtin.shell: "tmux run-shell /home/{{ remote_regular_user }}/.tmux/plugins/tpm/scripts/install_plugins.sh"
      become: yes
      become_user: "{{ remote_regular_user }}"

    - name: Install Rust if not present
      shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      args:
        creates: "/home/{{ remote_regular_user }}/.cargo/bin/rustc"
      become: false

    - name: Set default Rust toolchain
      ansible.builtin.shell: |
        source /home/{{ remote_regular_user }}/.cargo/env
        rustup default stable
      args:
        executable: /bin/zsh
      become: false

    - name: Add Cargo to PATH for user
      ansible.builtin.lineinfile:
        path: "/home/{{ remote_regular_user }}/.zshrc"
        line: 'export PATH="/home/{{ remote_regular_user }}/.cargo/bin:$PATH"'
        state: present
      become: false

    - name: Source .zshrc to load Cargo PATH
      ansible.builtin.shell: |
        source /home/{{ remote_regular_user }}/.zshrc
        cargo --version
      args:
        executable: /bin/zsh
      become: false

    - name: Clone kbct repository
      git:
        repo: 'https://github.com/samvel1024/kbct.git'
        dest: '/home/{{ remote_regular_user }}/kbct'
        version: 'HEAD'
      become: true

    - name: Ensure .config/kbct directory exists
      file:
        path: "/home/{{ remote_regular_user }}/.config/kbct"
        state: directory
        owner: "{{ remote_regular_user }}"
      become: true

    - name: Fix permissions for kbct directory
      ansible.builtin.command: "chown -R {{ remote_regular_user }}:{{ remote_regular_user }} /home/{{ remote_regular_user }}/kbct"
      become: true

    - name: Verify Cargo installation and build kbct
      shell: |
        source /home/{{ remote_regular_user }}/.cargo/env
        cargo --version
        cargo build --release
      args:
        chdir: '/home/{{ remote_regular_user }}/kbct'
        executable: /bin/zsh
      environment:
        PATH: "/home/{{ remote_regular_user }}/.cargo/bin:{{ ansible_env.PATH }}"
      become: true
      become_user: "{{ remote_regular_user }}"
      register: cargo_build
      ignore_errors: true

    - name: Debug Cargo build output
      debug:
        var: cargo_build.stdout_lines

    - name: Copy kbct to /usr/local/bin/
      copy:
        src: '/home/{{ remote_regular_user }}/kbct/target/release/kbct'
        dest: '/usr/local/bin/kbct'
        mode: '0755'
        remote_src: true

    - name: Verify kbct binary in /usr/local/bin/
      stat:
        path: /usr/local/bin/kbct
      register: kbct_stat

    - name: Enable and start kbct service
      systemd:
        name: kbct
        enabled: yes
        state: started
      become: true

- name: Install Hyprland on Kali Linux
  hosts: localhost
  become: yes
  tasks:
    - name: Update APT package index
      apt:
        update_cache: yes

    - name: Ensure necessary APT repositories are present
      apt_repository:
        repo: "{{ item }}"
        state: present
      with_items:
        - "deb http://deb.debian.org/debian sid main"
        - "deb-src http://deb.debian.org/debian sid main"
        - "deb http://deb.debian.org/debian trixie main"
        - "deb-src http://deb.debian.org/debian trixie main"

    - name: Install Hyprland and additional packages
      apt:
        name:
          - hyprland
          - xdg-desktop-portal-wlr
        state: present

    - name: Copy Hyprland desktop entry
      copy:
        src: /usr/share/wayland-sessions/hyprland.desktop
        dest: /usr/share/wayland-sessions/hyprland.desktop
        remote_src: yes


- name: Install Google Chrome on Kali Linux
  hosts: localhost
  become: yes
  tasks:
    - name: Add Google Chrome GPG key
      apt_key:
        url: 'https://dl.google.com/linux/linux_signing_key.pub'
        state: present

    - name: Add Google Chrome repository
      apt_repository:
        repo: 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main'
        state: present

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Google Chrome
      apt:
        name: google-chrome-stable
        state: present

    - name: Ensure Google Chrome is installed
      command: google-chrome --version
      register: chrome_version
      ignore_errors: yes

    - name: Print Google Chrome version
      debug:
        msg: "Google Chrome version: {{ chrome_version.stdout }}"

